name: Run installer | Mainnet

on:
  workflow_dispatch:
  push:
    branches:
      - sis/docker-test

jobs:

  run_installer_mainnet:
    runs-on: osmo-dev-runner
    steps:
      - 
        name: üêç Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - 
        name: Checkout repository
        uses: actions/checkout@v3
      - 
        name: ü§ñ Run osmosis-installer
        run: |
          python3 osmosis-installer.py \
            -i="$RUNNER_TEMP/.osmosisd" \
            -ds="snapshot" \
            -st="pruned" \
            -sl="netherlands" \
            -rdb="goleveldb" \
            -es=True \
            -sr=False \
            -cvs="osmoservice"
      -
        name: ‚è≥ Wait for node to start
        run: |
          echo "Waiting for chain to start..." 

          until $(curl --output /dev/null --silent --head --fail http://localhost:26657/status) && [ $(curl -s http://localhost:26657/status | jq -r '.result.sync_info.latest_block_height') -ne 0 ]; do
            printf '.'
            sleep 1
          done
      -
        name: ‚è≥ Wait for node to hit 50 blocks
        run: |
          CURRENT_HEIGHT=$(curl -s --retry 5 --retry-delay 5 --connect-timeout 30 -H "Accept: application/json" http://localhost:26657/status | jq -r '.result.sync_info.latest_block_height')
          TARGET_HEIGHT=$((CURRENT_HEIGHT+50))
          echo "Current block height is $CURRENT_HEIGHT."
          echo "Waiting for it to reach $TARGET_HEIGHT..."
          until $(curl --output /dev/null --silent --head --fail http://localhost:26657/status) && [ $(curl -s http://localhost:26657/status | jq -r '.result.sync_info.latest_block_height') -ge $TARGET_HEIGHT ]; do
            printf '.'
            sleep 5
          done
      - 
        name: Remove osmosisd.service
        if: always()
        run: |
          sudo systemctl stop osmosisd.service
          sudo systemctl disable osmosisd.service
          sudo rm /etc/systemd/system/osmosisd.service
          sudo systemctl daemon-reload
